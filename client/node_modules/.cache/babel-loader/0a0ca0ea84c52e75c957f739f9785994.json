{"ast":null,"code":"var _jsxFileName = \"/Users/andrewlin/projects/react-google-books/client/src/pages/MainPage/index.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport API from \"../../utils/API\";\nimport Nav from \"../../components/Nav\";\nimport Jumbotron from \"../../components/Jumbotron\";\nimport Container from \"../../components/Container\";\nimport Book from \"../../components/Book\";\nimport Footer from \"../../components/Footer\";\nimport { BtnSubmit, BtnSave } from \"../../components/Button\";\nimport './style.css';\nconst MAXRESULTS = 30;\n\nclass MainPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: '',\n      toResults: false,\n      books: [],\n      results: [],\n      isCollapsed: false,\n      message: ''\n    };\n\n    this.openBookshelf = () => {\n      API.getSavedBooks().then(res => {\n        this.setState({\n          books: res.data\n        });\n        console.log('*** Successfully opened the bookshelf! ***');\n        console.log(this.state.books);\n      }).catch(err => console.log(err));\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        value: event.target.value\n      });\n      console.log(this.state.value);\n    };\n\n    this.handleSubmit = () => {\n      this.props.history.push(\"/search\");\n    };\n\n    this.handleBookSave = id => {\n      //If the book is not saved, save the book:\n      if (!this.checkSave(id)) {\n        this.saveBook(id);\n      } //If the is saved, delete the book;\n      else {\n          this.deleteBook(id);\n        }\n    };\n\n    this.handleKeyPress = event => {\n      if (event.key === 'Enter') {\n        this.handleSubmit();\n        console.log('enter press here! ');\n      }\n    };\n\n    this.saveBook = id => {\n      alert(\"Saving book to bookshelf……\");\n      const book = this.state.results.find(book => book.id === id);\n      const bookData = {\n        googleId: book.id,\n        title: book.volumeInfo.title,\n        authors: book.volumeInfo.authors,\n        categories: book.volumeInfo.categories,\n        publisher: book.volumeInfo.publisher,\n        publishedDate: book.volumeInfo.publishedDate,\n        image: book.volumeInfo.imageLinks.thumbnail,\n        description: book.volumeInfo.description,\n        link: book.volumeInfo.previewLink\n      };\n      API.saveBook(bookData).then(() => {\n        console.log(\"Successfully saved!\");\n        this.openBookshelf();\n      }).catch(() => alert('Book already exists!'));\n    };\n\n    this.deleteBook = () => {\n      alert('Go to your bookshelf to delete!');\n      this.props.history.push('/saved');\n    };\n\n    this.checkSave = id => {\n      var tem = false;\n      this.state.books.forEach(book => {\n        if (book.googleId === id) {\n          tem = true;\n        }\n      });\n      return tem;\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      toResults: false\n    });\n    this.openBookshelf();\n  }\n\n  render() {\n    if (!this.state.toResults) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(Nav, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(Container, {\n        header: 'SEARCH',\n        icon: \"search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"input-group my-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control title\",\n        placeholder: \"\",\n        \"aria-label\": \"Book's Keyword\",\n        \"aria-describedby\": \"button-addon2\",\n        onChange: this.handleChange,\n        onKeyPress: this.handleKeyPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"input-group-append\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(BtnSubmit, {\n        className: \"btn btn-primary search\",\n        type: \"button\",\n        id: \"button-addon2\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"SEARCH\")))), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\n;\nexport default MainPage;","map":{"version":3,"sources":["/Users/andrewlin/projects/react-google-books/client/src/pages/MainPage/index.js"],"names":["React","axios","API","Nav","Jumbotron","Container","Book","Footer","BtnSubmit","BtnSave","MAXRESULTS","MainPage","Component","state","value","toResults","books","results","isCollapsed","message","openBookshelf","getSavedBooks","then","res","setState","data","console","log","catch","err","handleChange","event","target","handleSubmit","props","history","push","handleBookSave","id","checkSave","saveBook","deleteBook","handleKeyPress","key","alert","book","find","bookData","googleId","title","volumeInfo","authors","categories","publisher","publishedDate","image","imageLinks","thumbnail","description","link","previewLink","tem","forEach","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport API from \"../../utils/API\";\nimport Nav from \"../../components/Nav\"\nimport Jumbotron from \"../../components/Jumbotron\"\nimport Container from \"../../components/Container\";\nimport Book from \"../../components/Book\";\nimport Footer from \"../../components/Footer\";\nimport {BtnSubmit,BtnSave} from \"../../components/Button\"\nimport './style.css';\n\nconst MAXRESULTS = 30;\n\nclass MainPage extends React.Component {\n    state = {\n        value: '',\n        toResults:false,\n        books:[],\n        results:[],\n        isCollapsed:false,\n        message:''\n    };\n\n    componentDidMount() {\n        this.setState({\n            toResults:false,\n        })\n        this.openBookshelf();\n    }\n\n    openBookshelf = () => {\n        API.getSavedBooks()\n        .then(res => {\n            this.setState({\n                books:res.data,\n            })\n            console.log('*** Successfully opened the bookshelf! ***');\n            console.log(this.state.books);\n        })\n        .catch((err) => console.log(err))\n    }\n\n    handleChange = event => {\n        this.setState({value: event.target.value});\n        console.log(this.state.value);\n    }\n\n    handleSubmit = () => {\n        this.props.history.push(\"/search\");\n    }\n\n    // handleSubmit = () => {\n    //     this.setState({\n    //         toResults: true\n    //     })\n    //     console.log('Input keyword:' + this.state.value);\n\n    //     axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + this.state.value + '&maxResults=' + MAXRESULTS)\n    //     .then(res => {\n    //         if(!res.data.items){\n    //             this.setState({\n    //                 results: [],\n    //                 message: \"No Books Found...Try something else.\"\n    //             })\n    //         }\n    //         else{\n    //             var validBooks = res.data.items.filter( result =>\n    //                 result.id &&\n    //                 result.volumeInfo.title &&\n    //                 result.volumeInfo.authors &&\n    //                 result.volumeInfo.categories &&\n    //                 result.volumeInfo.publisher &&\n    //                 result.volumeInfo.publishedDate &&\n    //                 result.volumeInfo.imageLinks &&\n    //                 result.volumeInfo.imageLinks.thumbnail &&\n    //                 result.volumeInfo.infoLink &&\n    //                 result.volumeInfo.description &&\n    //                 result.volumeInfo.previewLink\n    //             )        \n    //             this.setState({\n    //                 results: validBooks,\n    //                 message:''\n    //             })          \n    //         }\n    //         console.log('*** Search Results: ***');\n    //         console.log(this.state.results);\n    //     })\n    //     .catch(() =>\n    //         this.setState({\n    //             results: [],\n    //             message: 'Please enter some key words.'\n    //         })\n    //     );\n    // }\n\n    handleBookSave = (id) => {\n        //If the book is not saved, save the book:\n        if(!this.checkSave(id)){\n            this.saveBook(id);\n        }\n        //If the is saved, delete the book;\n        else{\n            this.deleteBook(id);\n        }\n    };\n\n    handleKeyPress = (event) => {\n        if(event.key === 'Enter'){\n            this.handleSubmit();\n            console.log('enter press here! ')\n        }\n    }\n\n    saveBook = (id) => {\n        alert(\"Saving book to bookshelf……\");\n        const book = this.state.results.find(book => book.id === id);\n        const bookData = {\n            googleId:book.id,\n            title:book.volumeInfo.title,\n            authors:book.volumeInfo.authors,\n            categories:book.volumeInfo.categories,\n            publisher:book.volumeInfo.publisher,\n            publishedDate:book.volumeInfo.publishedDate,\n            image:book.volumeInfo.imageLinks.thumbnail,\n            description:book.volumeInfo.description, \n            link:book.volumeInfo.previewLink\n        };           \n        API.saveBook(bookData)\n        .then(() => {\n            console.log(\"Successfully saved!\");\n            this.openBookshelf();\n        })\n        .catch(() => alert('Book already exists!'))\n    }\n\n    deleteBook = () => {\n        alert('Go to your bookshelf to delete!')\n        this.props.history.push('/saved');\n    }\n\n    checkSave = (id) => {\n        var tem = false;\n        this.state.books.forEach(book => {\n            if(book.googleId === id){\n                tem = true;\n            }\n        })\n        return tem;\n    }\n\n    render() {\n        if (!this.state.toResults) {\n            return(\n                <div>\n                    <Nav />\n                    <Jumbotron />\n                    <Container header={'SEARCH'} icon='search'>\n                        <div className=\"input-group my-3\">\n                            <input type=\"text\" className=\"form-control title\" placeholder=\"\" aria-label=\"Book's Keyword\" aria-describedby=\"button-addon2\" onChange={this.handleChange} onKeyPress={this.handleKeyPress}></input>\n                            <div className=\"input-group-append\">\n                                <BtnSubmit className=\"btn btn-primary search\" type=\"button\" id=\"button-addon2\" onClick={this.handleSubmit} >SEARCH</BtnSubmit>\n                            </div>\n                        </div>\n                    </Container>\n                    <Footer />\n                    <br />\n                </div>\n            )\n        }\n    }\n};\n\nexport default MainPage;\n\n"]},"metadata":{},"sourceType":"module"}